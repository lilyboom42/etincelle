{% extends 'base.html.twig' %}

{% block title %}
    {{ isEdit ? 'Modifier' : 'Ajouter' }} un produit
{% endblock %}

{% block body %}
    <h1>{{ isEdit ? 'Modifier' : 'Ajouter' }} un produit</h1>

    <div class="product-form">
        {{ form_start(form, {'attr': {'class': 'form-horizontal-custom'}}) }}
        
        <div class="form-group">
            {{ form_row(form.name, {'class': 'form-control-custom'}) }}
        </div>
        
        <div class="form-group">
            {{ form_row(form.categoryProduct, {'class': 'form-control-custom'}) }}
        </div>
        
        <div class="form-group">
            {{ form_row(form.description, {'class': 'form-control-custom'}) }}
        </div>
        
        <div class="form-group">
            {{ form_row(form.price, {'class': 'form-control-custom'}) }}
        </div>
        
        <div class="form-group">
            {{ form_row(form.stockQuantity, {'class': 'form-control-custom'}) }}
        </div>

        <label>Images</label>
        <div id="product_images" data-prototype="{{ form_widget(form.productImages.vars.prototype)|e('html_attr') }}" data-index="{{ form.productImages|length }}">
            <ul class="images list-unstyled">
                {% for image in form.productImages %}
                    <li class="form-group">
                        {{ form_widget(image, {'class': 'form-control-custom'}) }}
                        <button type="button" class="btn btn-danger-custom remove-image">Supprimer cette image</button>
                    </li>
                {% endfor %}
            </ul>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary-custom">
                {{ product is defined ? 'Mettre à jour' : 'Ajouter' }}
            </button>
        </div>

        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascript %}
<script>
    document.addEventListener('DOMContentLoaded', initAddImageFunctionality);

    function initAddImageFunctionality() {
        const collectionHolder = document.querySelector('#product_images');
        if (!collectionHolder) {
            return;
        }

        const addButton = document.createElement('button');
        addButton.innerText = 'Ajouter une image';
        addButton.type = 'button';
        addButton.classList.add('btn', 'btn-primary-custom', 'add-image');
        collectionHolder.appendChild(addButton);  // Positionner le bouton après la liste d'images

        let index = parseInt(collectionHolder.dataset.index, 10) || collectionHolder.querySelectorAll('ul.images li').length;

        addButton.addEventListener('click', function (e) {
            e.preventDefault();

            let newForm = collectionHolder.dataset.prototype;
            newForm = newForm.replace(/__name__/g, index);

            const newFormElement = document.createElement('li');
            newFormElement.classList.add('form-group');
            newFormElement.innerHTML = newForm;

            const removeButton = document.createElement('button');
            removeButton.innerText = 'Supprimer cette image';
            removeButton.type = 'button';
            removeButton.classList.add('btn', 'btn-danger-custom', 'remove-image');

            newFormElement.appendChild(removeButton);
            collectionHolder.querySelector('ul.images').appendChild(newFormElement);

            addTagFormDeleteLink(newFormElement);
            index++;
            collectionHolder.dataset.index = index;
        });

        // Fonction pour ajouter la suppression à chaque image
        document.querySelectorAll('ul.images li').forEach((image) => {
            addTagFormDeleteLink(image);
        });

        function addTagFormDeleteLink(item) {
            const removeButton = item.querySelector('.remove-image');
            removeButton.addEventListener('click', (e) => {
                e.preventDefault();
                if (confirm('Êtes-vous sûr de vouloir supprimer cette image ?')) {
                    item.remove();
                    updateIndex();
                }
            });
        }

        function updateIndex() {
            const imageItems = collectionHolder.querySelectorAll('ul.images li');
            imageItems.forEach((item, idx) => {
                item.dataset.index = idx;
            });
            collectionHolder.dataset.index = imageItems.length;
        }
    }
</script>
{% endblock %}
